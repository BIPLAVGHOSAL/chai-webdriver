// Generated by CoffeeScript 1.6.3
var addSizzle, fs, seleniumWebdriver, sizzleCode, string, uglify;

fs = require('fs');

string = require('string');

uglify = require('uglify-js');

seleniumWebdriver = require('selenium-webdriver');

sizzleCode = uglify.minify(fs.readFileSync(require.resolve('sizzle'), 'utf8'), {
  fromString: true
}).code;

addSizzle = function(driver) {
  var get;
  get = driver.get;
  return driver.get = function() {
    return get.apply(driver, arguments).then(function() {
      return driver.executeScript(sizzleCode);
    });
  };
};

module.exports = function(driver) {
  var findElementByCss, findElementsByCss;
  addSizzle(driver);
  findElementByCss = function(css) {
    return driver.findElement(seleniumWebdriver.By.js(function(css) {
      return (Sizzle(css) || [])[0];
    }), css);
  };
  findElementsByCss = function(css) {
    return driver.findElements(seleniumWebdriver.By.js(function(css) {
      return Sizzle(css) || [];
    }), css);
  };
  return function(chai, utils) {
    var assertElementExists;
    assertElementExists = function(selector, done) {
      return findElementsByCss(selector).then(function(els) {
        if (els.length === 0) {
          throw new Error("Could not find element with selector " + selector);
        } else {
          return done();
        }
      });
    };
    chai.Assertion.addProperty('dom', function() {
      return utils.flag(this, 'dom', true);
    });
    chai.Assertion.addMethod('visible', function(done) {
      var assert, assertDisplayed,
        _this = this;
      if (!utils.flag(this, 'dom')) {
        throw new Error('Can only test visibility of dom elements');
      }
      assert = function(condition) {
        _this.assert(condition, 'Expected #{this} to be visible but it is not', 'Expected #{this} to not be visible but it is');
        if (typeof done === 'function') {
          return done();
        }
      };
      assertDisplayed = function() {
        return findElementByCss(_this._obj).isDisplayed().then(function(visible) {
          return assert(visible);
        });
      };
      if (utils.flag(this, 'negate')) {
        return findElementsByCss(this._obj).then(function(els) {
          if (els.length > 0) {
            return assertDisplayed();
          } else {
            return assert(els.length > 0);
          }
        });
      } else {
        return assertDisplayed();
      }
    });
    chai.Assertion.addMethod('count', function(length, done) {
      var _this = this;
      if (!utils.flag(this, 'dom')) {
        throw new Error('Can only test count of dom elements');
      }
      return findElementsByCss(this._obj).then(function(els) {
        _this.assert(els.length === length, 'Expected #{this} to appear in the DOM #{exp} times, but it shows up #{act} times instead.', 'Expected #{this} not to appear in the DOM #{exp} times, but it does.', length, els.length);
        if (typeof done === 'function') {
          return done();
        }
      });
    });
    chai.Assertion.addMethod('text', function(matcher, done) {
      var _this = this;
      if (!utils.flag(this, 'dom')) {
        throw new Error('Can only test text of dom elements');
      }
      return assertElementExists(this._obj, function() {
        return findElementByCss(_this._obj).getText().then(function(text) {
          if (utils.flag(_this, 'contains')) {
            _this.assert(~text.indexOf(matcher), 'Expected element <#{this}> to contain text "#{exp}", but it contains "#{act}" instead.', 'Expected element <#{this}> not to contain text "#{exp}", but it contains "#{act}".', matcher, text);
          } else {
            _this.assert(text === matcher, 'Expected text of element <#{this}> to be "#{exp}", but it was "#{act}" instead.', 'Expected text of element <#{this}> not to be "#{exp}", but it was.', matcher, text);
          }
          if (typeof done === 'function') {
            return done();
          }
        });
      });
    });
    chai.Assertion.addMethod('style', function(property, value, done) {
      var _this = this;
      if (!utils.flag(this, 'dom')) {
        throw new Error('Can only test style of dom elements');
      }
      return assertElementExists(this._obj, function() {
        return findElementByCss(_this._obj).getCssValue(property).then(function(style) {
          _this.assert(style === value, "Expected " + property + " of element <" + _this._obj + "> to be '" + value + "', but it is '" + style + "'.", "Expected " + property + " of element <" + _this._obj + "> to not be '" + value + "', but it is.");
          if (typeof done === 'function') {
            return done();
          }
        });
      });
    });
    chai.Assertion.addMethod('value', function(value, done) {
      var _this = this;
      if (!utils.flag(this, 'dom')) {
        throw new Error('Can only test value of dom elements');
      }
      return assertElementExists(this._obj, function() {
        return findElementByCss(_this._obj).getAttribute('value').then(function(actualValue) {
          _this.assert(value === actualValue, "Expected value of element <" + _this._obj + "> to be '" + value + "', but it is '" + actualValue + "'.", "Expected value of element <" + _this._obj + "> to not be '" + value + "', but it is.");
          if (typeof done === 'function') {
            return done();
          }
        });
      });
    });
    return chai.Assertion.addMethod('disabled', function(done) {
      var _this = this;
      if (!utils.flag(this, 'dom')) {
        throw new Error('Can only test value of dom elements');
      }
      return assertElementExists(this._obj, function() {
        return findElementByCss(_this._obj).getAttribute('disabled').then(function(disabled) {
          _this.assert(disabled, 'Expected #{this} to be disabled but it is not', 'Expected #{this} to not be disabled but it is');
          if (typeof done === 'function') {
            return done();
          }
        });
      });
    });
  };
};
